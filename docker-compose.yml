version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: postgres -c 'max_connections=200'

  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - CORE_DB_DRIVER=postgres
      - CORE_DB_HOST=postgres
      - CORE_DB_PORT=5432
      - CORE_DB_USER=${POSTGRES_USER:-postgres}
      - CORE_DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - CORE_DB_NAME=${POSTGRES_DB:-postgres}
      - TENANT_DB_DRIVER=postgres
      - TENANT_DB_HOST=postgres
      - TENANT_DB_PORT=5432
      - TENANT_DB_USER=${POSTGRES_USER:-postgres}
      - TENANT_DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - TENANT_DB_TEMPLATE={driver}://{user}:{password}@{host}{port}/{db_name}
      - JWT_SECRET=${JWT_SECRET:-super-secret-key-change-in-production}
      - INIT_DB=true
      - USE_GUNICORN=${USE_GUNICORN:-false}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
    ports:
      - "8000:8000"
    volumes:
      - ./migrations:/app/migrations
      - ./src:/app/src
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

volumes:
  postgres_data: 